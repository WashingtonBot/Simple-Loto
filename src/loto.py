"""Module providing a function simulating a loto \

"""

import random
import argparse


class LotoConstants():
    """Class for all the loto constants"""
    MAX_VALUE: int = 40
    MIN_VALUE: int = 1
    GRID_LENGTH: int = 6


def get_user_prompt(min_value: int, 
                    max_value: int, 
                    grid_length: int
                    ) -> list[int]:
    """
    Receives an input from user and converts it as a list on integers

    Parameters:
     - min_value (int) : The smallest number which can be played
     - max_value (int) : The highest number which can be played
     - grid_length (int) : The number of inputs who can be put in the list


    Returns:
    the list of integers received from the user
    """
    loto_grids_player = []
    while len(loto_grids_player) < grid_length:
        num_played = int(
            input(f"Choisissez votre prochain numéro entre {min_value}"
                  f" et {max_value}: "))
        if num_played not in range(min_value, max_value+1):
            print(
                f"Erreur : Votre nombre est inférieur à {min_value}"
                f" ou supérieur à {max_value}")
        elif loto_grids_player.count(num_played) > 0:
            print("Erreur : Votre nombre est double")
        else:
            loto_grids_player.append(num_played)
    return loto_grids_player


def generate_winner_list(min_value: int,
                         max_value: int,
                         grid_length: int
) -> set[int]:
    """
    Generates a list of integers

    Parameters:
     - min_value (int) : The smallest number which can be played
     - max_value (int) : The highest number which can be played
     - grid_length (int) : The number of inputs who can be put in the list


    Returns:
    the list of integers generated
    """
    loto_grids_winner = set()
    while len(loto_grids_winner) < grid_length:
        num_generated: int = random.randint(
            min_value, max_value)
        loto_grids_winner.add(num_generated)
    return loto_grids_winner


def send_wager_answer(received_list: set[int], generated_list: set[int]):
    """
        Send the user his list and the winning list

        Parameters:
        - received_list(list) : list sent by user retrieved
                                    with the get_user_prompt() function
        - generated_list(list) : list generated by the computer
                                    with the generate_winning_list() function
        Returns:
        the list of integers generated
        """

    received_list = sorted(received_list)
    generated_list = sorted(generated_list)

    print(f"Ta liste : {received_list}")
    print(f"La liste gagnante: {generated_list}")


def answer_common_member(num_players: set[int], 
                         num_computers: set[int], 
                         min_value: int, 
                         max_value: int):
    """
    Determines the number of winning numbers in user's list
                    and determines the amount they've won
    Parameters:
        - list_player(list) : list sent by user
                    retrieved with the get_user_prompt() function
        - list_computer(list) : list sengenerated by the computer
                    with the generate_winning_list() function
        -min_value (int) : The smallest number which can be played
        -max_value (int) : The highest number which can be played
    Returns:
    A response giving the user the information according to his wager
    """

    num_players = set(num_players)
    num_computers = set(num_computers)
    loto_grids_combined = list(set(num_players.intersection(num_computers)))
    combined_list_length: int = len(loto_grids_combined)
    if combined_list_length == 0:
        print("Vous n'avez pas de numéros gagnants \n Vous avez perdu :(")
    elif combined_list_length == min_value:
        print(
            f"Vous avez {combined_list_length} numéro gagnant :"
            f"{loto_grids_combined} \n Vous gagnez 1$")
    elif combined_list_length < 4 and combined_list_length > min_value:
        print(
            f"Vous avez {combined_list_length} numéros gagnants :"
            f"{loto_grids_combined} \n Vous gagnez 5$")
    elif combined_list_length < max_value and combined_list_length > 3:
        print(
            f"Vous avez {combined_list_length} numéros gagnants :"
            f"{loto_grids_combined} \n Vous gagnez 10$")
    elif combined_list_length == max_value:
        print(
            f"Vous avez {combined_list_length} numéros gagnants :"
            f"{loto_grids_combined} \n Vous gagnez 100$ :)")


def main(
        min_value: int,
        max_value: int,
        grid_length: int

):
    """
    Simulates a loto
                    -by receiving a user's list of number \
                    -and generating a winning list
                            composed of randomly obtained number
    Parameters:
    - min_value (int) : The smallest number which can be played
    - max_value (int) : The high est number which can be played
    - grid_length (int) : The number of inputs who can be put in the list

    Returns:
    The list the user composed and the one generated by the program
    """
    list_player = get_user_prompt(min_value, max_value, grid_length)
    list_computer = generate_winner_list(min_value, max_value, grid_length)
    send_wager_answer(list_player, list_computer)
    answer_common_member(list_player, list_computer, min_value, max_value)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(

        description="Customize loto parameters")

    parser.add_argument("--max_num", required=False,
                        help="The highest number which can be played",
                        default=LotoConstants.MAX_VALUE)
    parser.add_argument("--min_num", required=False,
                        help="The smallest number who can be played.",
                        default=LotoConstants.MIN_VALUE)
    parser.add_argument("--grid_length", required=False,
                        help="The number of inputs who can be put in the list",
                        default=LotoConstants.GRID_LENGTH)

    args = parser.parse_args()

    print("--- Parameters ---")
    print(f"[INFO] Minimal Number:'{args.min_num}'.")
    print(f"[INFO] Maximal Number:'{args.max_num}'.")
    print(f"[INFO] Grid Length:'{args.grid_length}'.")

    main(args.min_num, args.max_num, args.grid_length)
