"""Module providing a function simulating a loto \

"""

import random
import argparse
import json


class LotoConstants():
    """Class for all the loto constants"""
    MAX_VALUE: int = 40
    MIN_VALUE: int = 1
    GRID_LENGTH: int = 6


def get_user_prompt(min_value: int,
                    max_value: int,
                    grid_length: int
                    ) -> list[int]:
    """
    Receives an input from user and converts it as a list on integers

    Parameters:
     - min_value (int) : The smallest number which can be played
     - max_value (int) : The highest number which can be played
     - grid_length (int) : The number of inputs who can be put in the list


    Returns:
    the list of integers received from the user
    """
    loto_grids_player: list[int] = []
    while len(loto_grids_player) < grid_length:
        rep_user = input(f"Choisissez votre prochain numéro entre {min_value}"
                         f" et {max_value}: ")
        if not rep_user.isdigit():
            print("Votre réponse n'est pas un nombre!")
        else:
            num_played = int(rep_user)
            if num_played not in range(min_value, max_value+1):
                print(
                    f"Erreur : Votre nombre est inférieur à {min_value}"
                    f" ou supérieur à {max_value}")
            elif loto_grids_player.count(num_played) > 0:
                print("Erreur : Votre nombre est double")
            else:
                loto_grids_player.append(num_played)
    return loto_grids_player


def generate_winner_list(min_value: int,
                         max_value: int,
                         grid_length: int) -> set[int]:
    """
    Generates a list of integers

    Parameters:
     - min_value (int) : The smallest number which can be played
     - max_value (int) : The highest number which can be played
     - grid_length (int) : The number of inputs who can be put in the list


    Returns:
    the list of integers generated
    """
    loto_grids_winner: set = set()
    while len(loto_grids_winner) < grid_length:
        num_generated: int = random.randint(
            min_value, max_value)
        loto_grids_winner.add(num_generated)
    return loto_grids_winner


def compute_wager_answer(num_players,
                         num_computers: set[int]) -> list[int]:
    """
    Determines the number of winning numbers in user's list

    Parameters:
        - list_player(list) : list sent by user
                    retrieved with the get_user_prompt() function
        - list_computer(set) : list generated by the computer
                    with the generate_winning_list() function
        -min_value (int) : The smallest number which can be played
        -max_value (int) : The highest number which can be played
    Returns:
    A response giving the user the information according to his wager
    """
    print(f"Ta liste : {sorted(num_players)}")
    print(f"La liste gagnante: {sorted(num_computers)}")

    num_players = set(num_players)
    num_computers = set(num_computers)
    loto_grids_combined = list(set(num_players.intersection(num_computers)))

    return loto_grids_combined


def compute_gains(loto_grids_combined: list[int],
                  min_value: int,
                  grid_length: int) -> int:
    """
    Determines the amount the user has won
    Parameters:
        - loto-girds-combined(list) : list composed of the winning numbers in the user's list
                    retrieved with the send_wager_answer() function
        -min_value (int) : The smallest number which can be played
        -grid_length (int) : The number of inputs who can be put in the list
    Returns:
    An integer of the player's gains
    """
    combined_list_length = len(loto_grids_combined)
    if combined_list_length == 0:
        player_gains = 0
    if combined_list_length == 1:
        rate = int(combined_list_length*0.6+5)
        player_gains = int(combined_list_length*rate+10)
    elif combined_list_length < grid_length and combined_list_length > min_value:
        rate = int(combined_list_length*1.2+2)
        player_gains = int(combined_list_length*rate+10)
    if combined_list_length == grid_length:
        rate = int(combined_list_length*1.6+1)
        player_gains = int(combined_list_length*rate+10)
    return player_gains


def display_wager_answer(loto_grids_combined: list[int],
                         player_gains: int):
    """
    Displays to the user information about his wager
    Parameters:
        - loto-girds-combined(list) : list composed of the winning numbers
                    retrieved with the send_wager_answer() function
        -player_gains(int) : the amount the user has won
                    retrieved with the compute_gains() function
    Returns:
    Prints in the console relvant information
    """
    combined_list_length = len(loto_grids_combined)
    print(f"Vous avez {combined_list_length} numéros gagnants :"
          f"{loto_grids_combined} \n Vous gagnez {player_gains}$ :)")


def write_list_json(list_player: list[int],
                    list_computer: set[int],
                    list_combined: list[int],
                    player_gains: int,
                    grid_length: int):
    """
    Receives a list and indexes it into a json file

    Parameters:
     - list_to_append: the list which has to be put in the json file

    Returns:
    .
    """
    with open('C:\\Users\\azert\\Desktop\\Programme\\Nouveau dossier\\Simple-Loto\\src\\wager_details.json', "r+", encoding="utf-8") as filepath:
        try:
            json_list_content = json.load(filepath)
        except json.decoder.JSONDecodeError:
            json_list_content = {}
    with open('C:\\Users\\azert\\Desktop\\Programme\\Nouveau dossier\\Simple-Loto\\src\\wager_details.json', "w", encoding="utf-8") as fp:
        json_wager_infos = {'Your list': tuple(sorted(list_player)),
                            'Winning List': tuple(sorted(list_computer)),
                            'Your winning numbers': tuple(list_combined),
                            'Your gains': f"{player_gains}$",
                            "Amount of numbers you've played": f"{grid_length} numbers"}
        json_list_content.update(json_wager_infos)
        json.dump(json_list_content, fp, indent=3)


def main(
        min_value: int,
        max_value: int,
        grid_length: int

):
    """
    Simulates a loto
                    -by receiving a user's list of number \
                    -and generating a winning list
                            composed of randomly obtained number
    Parameters:
    - min_value (int) : The smallest number which can be played
    - max_value (int) : The high est number which can be played
    - grid_length (int) : The number of inputs who can be put in the list

    Returns:
    The list the user composed and the one generated by the program
    """
    list_player = get_user_prompt(min_value, max_value, grid_length)
    list_computer = generate_winner_list(min_value, max_value, grid_length)
    loto_grids_combined = compute_wager_answer(list_player, list_computer)
    player_gains = compute_gains(loto_grids_combined, min_value, grid_length)
    display_wager_answer(loto_grids_combined, player_gains)
    write_list_json(list_player, list_computer, loto_grids_combined,
                    player_gains, grid_length)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(

        description=" This file provides a function simulating a loto")

    parser.add_argument("--max_num", required=False,
                        help="The highest number which can be played",
                        default=LotoConstants.MAX_VALUE)
    parser.add_argument("--min_num", required=False,
                        help="The smallest number who can be played.",
                        default=LotoConstants.MIN_VALUE)
    parser.add_argument("--grid_length", required=False,
                        help="The number of inputs who can be put in the list",
                        default=LotoConstants.GRID_LENGTH)

    args = parser.parse_args()

    print("--- Parameters ---")
    print(f"[INFO] Minimal Number:'{args.min_num}'.")
    print(f"[INFO] Maximal Number:'{args.max_num}'.")
    print(f"[INFO] Grid Length:'{args.grid_length}'.")

    main(int(args.min_num), int(args.max_num), int(args.grid_length))
